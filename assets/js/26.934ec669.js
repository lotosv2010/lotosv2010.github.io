(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{460:function(s,n,a){"use strict";a.r(n);var e=a(2),t=Object(e.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"知识点一-单例模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#知识点一-单例模式"}},[s._v("#")]),s._v(" 知识点一 单例模式")]),s._v(" "),n("ul",[n("li",[s._v("对象数据类型的作用")])]),s._v(" "),n("ol",[n("li",[n("ul",[n("li",[s._v("把描述一个事物(同一个对象)的属性和方法放在一个内存空间下，起到了分组的作用，这样不同事物之间的属性即使属性名相同，相互也不会发生冲突")])])])]),s._v(" "),n("ul",[n("li",[s._v("我们把这种分组编写代码的模式叫做 "),n("strong",[s._v("单例模式")])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var person1 = {\n  name: 'zhangsan',\n  age: 18\n}\n\nvar person2 = {\n  name: 'lisi',\n  age: 48\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("ol",[n("li",[s._v("在单例模式中我们把 "),n("code",[s._v("person1")]),s._v(" 和 "),n("code",[s._v("person2")]),s._v(" 也叫做 "),n("strong",[s._v("命名空间")])]),s._v(" "),n("li",[s._v("单例模式是一种项目开发中经常使用的模式，因为项目中我们可以使用单例模式来进行 "),n("strong",[s._v("模块化开发")])]),s._v(" "),n("li",[s._v("**模块化开发：**对于一个相对来说比较大的项目，需要对人协作的开发，我们一般情况下会根据当前项目的需求划分成几个功能模块，每个人负责一部分，同时开发，最后把每个人的代码进行合并")])]),s._v(" "),n("h2",{attrs:{id:"知识点二-工厂模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#知识点二-工厂模式"}},[s._v("#")]),s._v(" 知识点二 工厂模式")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("单例模式虽然解决了分组的作用，但是不能实现批量的生产，属于手工作业模式")])]),s._v(" "),n("li",[n("p",[n("strong",[s._v("工厂模式")]),s._v("：把实现同一件事情的相同代码放到一个函数中，以后如果再想实现这个功能，不需要重新的编写这些代码了，只需要执行当前的函数即可")])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function create(name, age) {\n  var obj = {\n    name: name,\n    age: age,\n    write: function() {\n      console.log(`${this.name} can write js`)\n    }\n  }\n  return obj\n}\nvar p1 = create('p1', 18)\np1.write()\nvar p2 = create('p2', 28)\np2.write()\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("ul",[n("li",[n("p",[n("strong",[s._v("工厂模式 --\x3e 函数的封装 --\x3e 低耦合高内聚")])])]),s._v(" "),n("li",[n("p",[n("strong",[s._v("低耦合高内聚")]),s._v("：减少页面中冗余代码，提高代码的重复利用率")])]),s._v(" "),n("li",[n("p",[n("code",[s._v("js")]),s._v(" 是一门轻量级的脚本 "),n("strong",[s._v("编程语言")]),s._v("， "),n("code",[s._v("html+css")]),s._v(" 不属于编程语言，属于"),n("strong",[s._v("标记语言")])])]),s._v(" "),n("li",[n("p",[s._v("所有的编程语言( "),n("code",[s._v(".net 、C#、php、Java、c、c++、vb、vf、oc、......")]),s._v(")都是面向对象开发的 --\x3e 继承、封装、多态")])])]),s._v(" "),n("ol",[n("li",[n("ul",[n("li",[s._v("继承：子类继承父类的属性和方法")])])]),s._v(" "),n("li",[n("ul",[n("li",[s._v("多态：当前方法的多种形态，在后台语言中多态包含重写("),n("code",[s._v("Override")]),s._v(" )与重载("),n("code",[s._v("Overload")]),s._v(" )")])])])]),s._v(" "),n("ul",[n("li",[n("ul",[n("li",[n("ul",[n("li",[s._v("重写是子类对父类的允许访问的方法的实现过程进行重新编写, 返回值和形参都不能改变。"),n("strong",[s._v("即外壳不变，核心重写！")])]),s._v(" "),n("li",[s._v("重载("),n("code",[s._v("overloading")]),s._v(" ) 是在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同")])])])])])]),s._v(" "),n("p",[n("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/738210/1597389121684-e45d3ece-703e-4d9a-ab72-6b4eba73ecc4.png",alt:"image.png"}})]),s._v(" "),n("p",[n("strong",[s._v("注意")]),s._v("："),n("code",[s._v("js")]),s._v(" 中不存在重载，方法名一样的话，后面的会把前面的覆盖掉，最后只保留一个。")]),s._v(" "),n("p",[n("code",[s._v("js")]),s._v(" 中有一个操作类似重载但不是重载，我们可以根据传递参数的不一样，实现不同的功能，例如：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function sum(num) {\n  if(typeof num === 'undefined')\n    return 0;\n  return num\n}\nsum(100)\nsum()\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h2",{attrs:{id:"知识点三-构造函数模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#知识点三-构造函数模式"}},[s._v("#")]),s._v(" 知识点三 构造函数模式")]),s._v(" "),n("h3",{attrs:{id:"概述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[s._v("#")]),s._v(" 概述")]),s._v(" "),n("ul",[n("li",[n("p",[n("strong",[s._v("构造函数模式")]),s._v("：目的就是为了创建一个自定义类，并且创建这个类的实例")])]),s._v(" "),n("li",[n("ul",[n("li",[s._v("在构造函数模式中 "),n("code",[s._v("new Fn()")]),s._v(" 执行，如果 "),n("code",[s._v("Fn")]),s._v(" 不需要传递参数的话，后面的小括号可以省略")]),s._v(" "),n("li",[n("code",[s._v("this")]),s._v(" 的问题：在类中出现的 "),n("code",[s._v("this.xxx = xxx")]),s._v(" 中的 "),n("code",[s._v("this")]),s._v(" 都是当前类的实例，而某一个属性值(方法)，方法中的 "),n("code",[s._v("this")]),s._v(" 需要看方法执行的时候，前面是否有 "),n("code",[s._v(".")]),s._v(" 才能知道 "),n("code",[s._v("this")]),s._v(" 是谁")]),s._v(" "),n("li",[s._v("类有普通函数的一面，当函数执行的时候， "),n("code",[s._v("var xxx")]),s._v(" 其实只是当前形成的私有作用域中的私有变量而已，它和我们的当前类的实例没有任何的关系，只有 "),n("code",[s._v("this.xxx = xxx")]),s._v(" 才相当于给当前类的实例增加私有的属性和方法，才和我们的当前类的实例有关系")]),s._v(" "),n("li",[s._v("在构造函数模式中，浏览器会默认的把我们当前类的的实例返回(返回的是一个对象数据类型的值)，如果我们手动写了 "),n("code",[s._v("return")]),s._v(" 返回")])])]),s._v(" "),n("li",[n("ul",[n("li",[n("ul",[n("li",[s._v("返回的是一个基本数据类型的值，当前实例是不变的，例如 "),n("code",[s._v("return 100")]),s._v(" ，即返回的还是当前类的实例")]),s._v(" "),n("li",[s._v("返回的是一个引用数据类型的值，当前的实例会被自己返回的值替换掉，例如 "),n("code",[s._v("return { name: 'p1' }")]),s._v(" ，返回的就不是当前类的实例了，而是对象 "),n("code",[s._v("{ name:'p1' }")])])])])])]),s._v(" "),n("li",[n("ul",[n("li",[s._v("检测某一个实例是否属于当前类的实例，用 "),n("code",[s._v("instanceof")]),s._v(" ，例如 "),n("code",[s._v("p2 instaceof CreateJsPerson2")]),s._v(" --\x3e true，同时"),n("code",[s._v("p2 instaceof Object")]),s._v(" --\x3e true，因为所有的实例都是对象数据类型，而每一个对象数据类型都是 "),n("code",[s._v("Object")]),s._v(" 这个内置类的一个实例，所以 "),n("code",[s._v("p2")]),s._v(" 是 "),n("code",[s._v("Object")]),s._v(" 的一个实例")])])]),s._v(" "),n("li",[n("p",[s._v("构造函数模式和工厂模式的区别")])]),s._v(" "),n("li",[n("ul",[n("li",[s._v("执行的时候")])])]),s._v(" "),n("li",[n("ul",[n("li",[n("ul",[n("li",[s._v("普通函数执行--\x3e "),n("code",[s._v("createJsPerson()")])]),s._v(" "),n("li",[s._v("构造函数执行--\x3e "),n("code",[s._v("new createJsPerson()")]),s._v(" ，通过 "),n("code",[s._v("new")]),s._v(" 执行后，我们的 "),n("code",[s._v("createJsPerson")]),s._v(" 就是一个类了，而函数执行返回值("),n("code",[s._v("p1")]),s._v(" )就是"),n("code",[s._v("createJsPerson")]),s._v(" 这个类的一个实例")])])])])]),s._v(" "),n("li",[n("ul",[n("li",[s._v("在函数代码执行的时候")])])]),s._v(" "),n("li",[n("ul",[n("li",[n("ul",[n("li",[s._v("相同：都是形成一个私有的作用域，然后执行顺序为："),n("strong",[s._v("形参赋值 --\x3e 预解释 --\x3e 代码自上而下执行(类和普通函数一样，也有普通的一面)")])]),s._v(" "),n("li",[s._v("不同：")])])])])]),s._v(" "),n("li",[n("ul",[n("li",[n("ul",[n("li",[n("ul",[n("li",[s._v("在代码执行之前，不用自己手动的创建对象，浏览器会默认的创建一个对象数据类型的值(这个对象其实就是我们当前类的一个实例)")]),s._v(" "),n("li",[s._v("接下来代码从上到下执行，以当前的实例为执行的主体("),n("code",[s._v("this")]),s._v(" 代表当前的实例)，然后分别的把属性名和属性值赋值给当前的实例")]),s._v(" "),n("li",[s._v("最后浏览器会把默认的创建的实例返回")])])])])])])]),s._v(" "),n("li",[n("p",[n("code",[s._v("js")]),s._v(" 中所有的类都是函数数据类型的，它通过"),n("code",[s._v("new")]),s._v(" 执行变成了一个类，但它本是也是一个普通的函数")])]),s._v(" "),n("li",[n("p",[n("code",[s._v("js")]),s._v(" 中所有的实例都是对象数据类型的")])]),s._v(" "),n("li",[n("p",[s._v("在类中给实例增加的属性( "),n("code",[s._v("this.xxx")]),s._v(")属于当前实例的私有的属性，实例和实例之间是单独的个体，所有私有的属性不是同一个，即 "),n("code",[s._v("p1")]),s._v("  和 "),n("code",[s._v("p2")]),s._v(" 都是 "),n("code",[s._v("CreateJsPerson2")]),s._v(" 这个类的实例，所以都拥有 "),n("code",[s._v("write")]),s._v(" 这个方法，但是不同实例之间的方法是不一样的")])]),s._v(" "),n("li",[n("p",[s._v("检测数据类型")])]),s._v(" "),n("li",[n("ul",[n("li",[n("code",[s._v("typeof")]),s._v(" 有自己的局限性，不能区分 "),n("code",[s._v("Object")]),s._v(" 下的对象、数组、正则等")]),s._v(" "),n("li",[n("code",[s._v("instanceof")]),s._v(" 可以检测当前实例属性哪个类")]),s._v(" "),n("li",[n("code",[s._v("in")]),s._v(" 检测某个属性是否属于当前对象，例如 "),n("code",[s._v("write in p2")]),s._v(" --\x3e true，不管私有的属性还是公有的属性，都可以用 "),n("code",[s._v("in")]),s._v(" 来检测")]),s._v(" "),n("li",[n("code",[s._v("hasOwnProperty")]),s._v(" 用来检测某个属性是否为当前对象的"),n("strong",[s._v("私有属性")]),s._v("，这个方法只能检测私有属性，例如 "),n("code",[s._v("p2.hasOwnProperty('write')")]),s._v(" --\x3e true")]),s._v(" "),n("li",[n("code",[s._v("isPrototypeOf()")]),s._v(" 方法测试一个对象是否存在另一个对象的原型链上，语法  "),n("code",[s._v("object1.isPrototypeOf(Object2)")])])])]),s._v(" "),n("li",[n("p",[s._v("构造函数模式中拥有了"),n("strong",[s._v("类")]),s._v("和"),n("strong",[s._v("实例")]),s._v("的概念，并且实例和实例之间是相互独立的，这个过程称"),n("strong",[s._v("实例识别")])])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 普通函数\nfunction CreateJsPerson(name, age) {\n  var obj = {}\n  obj.name = name\n  obj.age = age\n  obj.write = function() {\n      console.log(`${obj.name} can write js`)\n    }\n  return obj\n}\nvar p = CreateJsPerson('p', 18)\n\n// 构造函数\nfunction CreateJsPerson2(name, age) {\n  var num = 100 // 私有变量，和当前类的实例没有任何的关系\n  // this 是当前类的实例\n  this.name = name\n  this.age = age\n  this.write = function() {\n    // this 需要看write执行的时候才能知道\n      console.log(`${this.name} can write js`)\n    }\n}\nvar p1 = new CreateJsPerson2('p1', 18)\nvar p2 = new CreateJsPerson2('p2', 28)\np2.write() // 方法中的 this 是 p2，this.name --\x3e p2\nvar write = p2.write\nwrite() // 方法中的 this 是 window，this.name --\x3e undefined\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br")])]),n("h3",{attrs:{id:"手写new"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#手写new"}},[s._v("#")]),s._v(" 手写new")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('function realizeNew () {\n  //创建一个新对象\n  let obj  = {};\n  //获得构造函数\n  let Constructor = [].shift.call(arguments);\n  //链接到原型（给obj这个新生对象的原型指向它的构造函数的原型）\n  obj.__proto__ = Constructor.prototype;\n  //绑定this\n  let result = Constructor.apply(obj,arguments);\n  //确保new出来的是一个对象\n  return typeof result === "object" ? result : obj\n}\n\nfunction myNew(Obj,...args){\n  var obj = Object.create(Obj.prototype);//使用指定的原型对象及其属性去创建一个新的对象\n  Obj.apply(obj,args); // 绑定 this 到obj, 设置 obj 的属性\n  return obj; // 返回实例\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("h3",{attrs:{id:"参考"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[s._v("#")]),s._v(" 参考")]),s._v(" "),n("p",[n("a",{attrs:{href:"https://www.jianshu.com/p/be7c95714586",target:"_blank",rel:"noopener noreferrer"}},[s._v("js的原型和原型链"),n("OutboundLink")],1)]),s._v(" "),n("h2",{attrs:{id:"知识点四-原型-链-模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#知识点四-原型-链-模式"}},[s._v("#")]),s._v(" 知识点四 原型(链)模式")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 构造函数\nfunction CreateJsPerson(name, age) {\n  this.name = name\n  this.age = age\n}\nCreateJsPerson.prototype.write = function() {\n  console.log(`${this.name} can write js`)\n}\nvar p1 = new CreateJsPerson('p1', 18)\nvar p2 = new CreateJsPerson('p2', 28)\n\nconsole.log(p1.write === p2.write) // true\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("ul",[n("li",[n("p",[n("strong",[s._v("原型模式")]),s._v("：解决了方法或者属性公有问题，即把实例之间相同的属性和方法提取成公有的属性和方法，想让谁公有就把它放在构造函数的 "),n("code",[s._v("prototype")]),s._v(" 属性上，例如： "),n("code",[s._v("CreateJsPerson.prototype.write")])])]),s._v(" "),n("li",[n("p",[s._v("相关概念")])])]),s._v(" "),n("ol",[n("li",[n("ol",[n("li",[n("strong",[s._v("每一个函数数据类型(普通函数、类)都有一个天生自带的属性")]),s._v(" "),n("strong",[n("code",[s._v("prototype")])]),s._v(" "),n("strong",[s._v("，它存储的值是一个对象数据类型的值，浏览器默认为其开辟一个")]),s._v(" "),n("strong",[s._v("堆内存")])]),s._v(" "),n("li",[n("strong",[s._v("在")]),s._v(" "),n("strong",[n("code",[s._v("prototype")])]),s._v(" "),n("strong",[s._v("上浏览器天生给它加了一个属性")]),s._v(" "),n("strong",[n("code",[s._v("constructor")])]),s._v(" "),n("strong",[s._v("(构造函数)，属性值是当前函数(类)的本身(只有浏览器默认给prototype开辟的这个堆内存才有constructor属性)")])]),s._v(" "),n("li",[n("strong",[s._v("每一个数据对象类型(普通的对象、实例、"),n("code",[s._v("prototype")]),s._v(" 等)也天生自带一个属性 "),n("code",[s._v("__proto__")]),s._v("，这个属性值是当前实例所属类的原型("),n("code",[s._v("prototype")]),s._v(")")])])])])]),s._v(" "),n("ul",[n("li",[n("code",[s._v("Object")]),s._v(" 是 "),n("code",[s._v("js")]),s._v(" 中所有对象数据类型的基类(最顶层的类)")])]),s._v(" "),n("ol",[n("li",[n("ol",[n("li",[s._v("实例通过 "),n("code",[s._v("__proto__")]),s._v(" 可以向上级查找，不管有多少级总能找到 "),n("code",[s._v("Object")])]),s._v(" "),n("li",[s._v("在 "),n("code",[s._v("Object.prototype")]),s._v(" 上没有 "),n("code",[s._v("__proto__")]),s._v(" 这个属性")])])])]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("原型链模式")])])]),s._v(" "),n("ol",[n("li",[n("ol",[n("li",[s._v("通过 "),n("code",[s._v("对象名.属性名")]),s._v(" 的方式获取属性值的时候，首先在对象的私有的属性上进行查找，如果私有中存在这个属性，则获取的是私有的属性值；如果私有的没有，则通过 "),n("code",[s._v("__proto__")]),s._v(" 找到所属类的原型(类的原型上定义的属性和方法都是当前实例公有的属性和方法)，原型上存在的话，获取的是公有属性的值；如果原型上也没有，则继续通过原型上的 "),n("code",[s._v("__proto__")]),s._v(" 继续向上查找，一直找到 "),n("code",[s._v("Object.prototype")]),s._v(" 为止")]),s._v(" "),n("li",[s._v("上述的查找机制就是"),n("strong",[s._v("原型链模式")])])])])]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("注意")]),s._v(" 在IE浏览器中，我们原型模式也是同样的原理，但是"),n("code",[s._v("IE")]),s._v(" 浏览器怕你通过 "),n("code",[s._v("__proto__")]),s._v(" 把公有的修改，禁止我们使用 "),n("code",[s._v("__proto__")])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function Fn() {\n  this.x = 100;\n  this.y = 200;\n  this.sum = function() {}\n}\nFn.prototype.getX = function() {\n  console.log(`${this.x}`)\n}\nFn.prototype.getY = function() {\n  console.log(`${this.y}`)\n}\nFn.prototype.sum = function() {}\nvar f1 = new Fn;\nvar f2 = new Fn;\n\nconsole.log(Fn.prototype.constructor === Fn) // true\nf1.hasOwnProperty === f1.__proto__.__proto__.hasOwnProperty // true\nf1.hasOwnProperty === Object.hasOwnProperty // true\n\n// 修改私有/公有属性/方法\nf1.sum = function() {} // 修改私有方法\nf1.__proto__.sum = function() {} // // 修改公有方法\nFn.prototype.sum = function() {} // // 修改公有方法\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br")])]),n("p",[n("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/738210/1597887450151-2d1c4fe8-dd21-4a69-97e7-0fc57e30134e.png",alt:"image.png"}})]),s._v(" "),n("ul",[n("li",[s._v("在原型模式中，"),n("code",[s._v("this")]),s._v(" 常用的两种情况")])]),s._v(" "),n("ol",[n("li",[n("ol",[n("li",[s._v("在类中出现的 "),n("code",[s._v("this.xxx")]),s._v(" 中的 "),n("code",[s._v("this")]),s._v(" 是当前类的一个实例")]),s._v(" "),n("li",[s._v("某一个方法中的 "),n("code",[s._v("this")]),s._v(" ，看执行的时候 "),n("code",[s._v(".")]),s._v(" 前面是谁 "),n("code",[s._v("this")]),s._v(" 就是谁")])])]),s._v(" "),n("li",[n("ol",[n("li",[n("ol",[n("li",[s._v("需要先确定 "),n("code",[s._v("this")]),s._v(" 的指向("),n("code",[s._v("this")]),s._v(" 是谁)")]),s._v(" "),n("li",[s._v("把 "),n("code",[s._v("this")]),s._v(" 替换成对应的代码")]),s._v(" "),n("li",[s._v("按照原型链查找的机制，一步步的查找结果")])])])])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function Fn() {\n  this.x = 100;\n  this.y = 200\n  this.getY = function() {\n     console.log(`${this.y}`)\n  }\n}\nFn.prototype = {\n  constructor: Fn,\n  y: 300,\n  getX: function() {\n    console.log(`${this.x}`)\n  },\n  getY: function() {\n    console.log(`${this.y}`)\n  }\n}\nvar f = new Fn;\n// this是实例f\n// 即：console.log(`${this.x}`) --\x3e console.log(`${f.x}`)\n// 所以：x 是 100\nf.getX() \n// this是Fn的原型\n// 即：console.log(`${this.x}`) --\x3e console.log(`${f.__proto__.x}`) --\x3e console.log(`${Fn.prototype.x}`) \n// 所以：x 是 undefined\nf.__proto__.getX() \n// this是Fn的原型\n// 即：console.log(`${this.y}`) --\x3e console.log(`${f.__proto__.y}`) --\x3e console.log(`${Fn.prototype.y}`) \n// 所以：x 是 300\nf.__proto__.getY() \n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br")])]),n("ul",[n("li",[s._v("链式编程")])]),s._v(" "),n("ol",[n("li",[n("ul",[n("li",[s._v("原理： "),n("code",[s._v("sort")]),s._v(" 是 "),n("code",[s._v("Array.prototype")]),s._v(" 上的公有的方法，而数组"),n("code",[s._v("ary")]),s._v(" 是"),n("code",[s._v("Array")]),s._v(" 这个类的一个实例，所以"),n("code",[s._v("ary")]),s._v(" 可以使用"),n("code",[s._v("sort")]),s._v(" 方法")])])])]),s._v(" "),n("ul",[n("li",[n("ul",[n("li",[n("ul",[n("li",[n("code",[s._v("sort")]),s._v("  执行完成的返回值是一个排序后的 "),n("code",[s._v("数组")]),s._v(" ，可以继续执行 "),n("code",[s._v("reverse")])]),s._v(" "),n("li",[n("code",[s._v("reverse")]),s._v("  执行完成的返回值是一个数组，可以继续执行 "),n("code",[s._v("pop")])]),s._v(" "),n("li",[n("code",[s._v("pop")]),s._v("  执行完成返回的值是被删除的那个元素，不是一个数组，所以再执行"),n("code",[s._v("push")]),s._v(" 报错")])])])])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Array.prototype.myUnique = function() {\n  var obj = {}\n  for(var i = 0; i < this.length; i++) {\n    var cur = this[i]\n    if(obj[cur] === cur) {\n      this[i] = this[this.length - 1]\n      this.length--\n      i--\n      continue\n    }\n    obj[cur] = cur\n  }\n  obj = null\n  return this\n}\n\nvar ary = [12, 23, 23, 13, 12, 13, 23, 13, 12]\nary.myUnique().sort((a, b) => a-b).reverse().pop()\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("ul",[n("li",[s._v("批量设置公有属性")])]),s._v(" "),n("ol",[n("li",[n("ul",[n("li",[s._v("起别名的方式")])])]),s._v(" "),n("li",[n("ul",[n("li",[s._v("重构原型对象的方式：")])])])]),s._v(" "),n("ul",[n("li",[n("ul",[n("li",[n("ul",[n("li",[s._v("自己新开辟一个堆内存，存储我们公有的属性和方法，把浏览器原来给 "),n("code",[s._v("Fn.prototype")]),s._v(" 开辟的那个替换掉")]),s._v(" "),n("li",[s._v("只有浏览器天生给"),n("code",[s._v("Fn.prototype")]),s._v(" 开辟的堆内存里面才有 "),n("code",[s._v("constructor")]),s._v(" ，而我们自己开辟的这个堆内存没有这个属性，这样 "),n("code",[s._v("constructor")]),s._v(" 指向就不是 "),n("code",[s._v("Fn")]),s._v(" 而是 "),n("code",[s._v("Object")]),s._v(" ，为了和原来的保持一致，我们需要手动的增加 "),n("code",[s._v("constructor")]),s._v(" 指向")]),s._v(" "),n("li",[s._v("用这种方式给内置类增加公有属性，浏览器会屏蔽掉这个修改原型对象的操作，但是我们可以通过 "),n("code",[s._v("Array.prototype.sort")]),s._v(" 这种方式修改内置类原型上的原有方法，所以我们以后在内置类的原型上增加方法，命名都需要加特殊的前缀")])])])])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function Fn() {\n  this.x = 100;\n  this.y = 200;\n  this.z = 300;\n}\nvar f = new Fn;\n\n// 普通方式设置公有属性\nFn.prototype.getX = function() {\n  console.log(`${this.x}`)\n}\nFn.prototype.getY = function() {\n  console.log(`${this.y}`)\n}\nFn.prototype.getZ = function() {\n  console.log(`${this.z}`)\n}\n\n// 起别名方式设置公有属性\nvar pro = Fn.prototype\npro.getX = function() {\n  console.log(`${this.x}`)\n}\npro.getY = function() {\n  console.log(`${this.y}`)\n}\npro.getZ = function() {\n  console.log(`${this.z}`)\n}\n\n// 重构原型对象的方式\nFn.prototype = {\n  constructor: Fn,\n  a: function() {},\n  b: function() {},\n  getX: function() {\n    console.log(`${this.x}`)\n  },\n  getY: function() {\n    console.log(`${this.y}`)\n  },\n  getZ: function() {\n    console.log(`${this.z}`)\n  }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br")])]),n("p",[n("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/738210/1597802412168-9d245c23-0bbf-4146-9c6c-657056ed307e.png?x-oss-process=image%2Fresize%2Cw_1500",alt:"image.png"}})]),s._v(" "),n("h2",{attrs:{id:"知识点五-继承"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#知识点五-继承"}},[s._v("#")]),s._v(" 知识点五 继承")]),s._v(" "),n("h3",{attrs:{id:"方式一-原型继承"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方式一-原型继承"}},[s._v("#")]),s._v(" 方式一 原型继承")]),s._v(" "),n("p",[s._v("常用")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("原型继承是"),n("code",[s._v("js")]),s._v(" 中最常用的一种继承方式")])]),s._v(" "),n("li",[n("p",[s._v("子类"),n("code",[s._v("B")]),s._v(" 想要继承父类"),n("code",[s._v("A")]),s._v(" 中的所用的属性和方法(私有+公有)，只要让 "),n("code",[s._v("B.prototype = new A")]),s._v("  即可")])]),s._v(" "),n("li",[n("p",[s._v("特点：它是把父类中私有的+公有的都继承到了子类原型上(子类公有的)")])]),s._v(" "),n("li",[n("p",[n("strong",[s._v("核心")]),s._v("：原型继承并不是把父类("),n("code",[s._v("A")]),s._v(" )中的属性和方法克隆一份一模一样的给子类("),n("code",[s._v("B")]),s._v(" )，而是让子类("),n("code",[s._v("B")]),s._v(" )和父类("),n("code",[s._v("A")]),s._v(" )之间增加了原型链的链接，以后子类的实例("),n("code",[s._v("b")]),s._v(" )想要父类("),n("code",[s._v("A")]),s._v(" )中的方法("),n("code",[s._v("getX")]),s._v(" )，需要一级级的向上查找来使用")])]),s._v(" "),n("li",[n("p",[s._v("特点：")])]),s._v(" "),n("li",[n("ul",[n("li",[s._v("非常纯粹的继承关系，实例是子类的实例，也是父类的实例")]),s._v(" "),n("li",[s._v("父类新增原型方法/原型属性，子类都能访问到")]),s._v(" "),n("li",[s._v("简单，易于实现")])])]),s._v(" "),n("li",[n("p",[s._v("缺点：")])]),s._v(" "),n("li",[n("ul",[n("li",[s._v("来自原型对象的所有属性被所有实例共享")]),s._v(" "),n("li",[s._v("创建子类实例时，无法向父类构造函数传参")])])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 父类\nfunction A() {\n  this.x = 100\n}\nA.prototype.getX = function() {\n  console.log(this.x)\n}\n// 子类\nfunction B() {\n  this.y = 300\n  this.x = 200\n}\nB.prototype = new A;\nB.prototype.constructor = B\nB.prototype.getY = function() {\n  console.log(this.y)\n}\n\n// 测试\nvar b = new B\nb.getX()\nb.getY()\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br")])]),n("p",[n("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/738210/1606540590588-1df77bc6-c157-4334-8d61-3b2f0e7a4639.png?x-oss-process=image%2Fresize%2Cw_1500",alt:"image.png"}})]),s._v(" "),n("h3",{attrs:{id:"方式二-借用构造函数继承-call继承"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方式二-借用构造函数继承-call继承"}},[s._v("#")]),s._v(" 方式二 **借用构造函数继承(**call继承)")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("把父类"),n("strong",[s._v("私有的")]),s._v("属性和方法克隆一份一模一样的作为子类私有的属性")])]),s._v(" "),n("li",[n("p",[n("strong",[s._v("核心")]),s._v("：使用父类的构造函数来增强子类实例，等于是复制父类的实例属性给子类（没用到原型）")])]),s._v(" "),n("li",[n("p",[s._v("特点：")])]),s._v(" "),n("li",[n("ul",[n("li",[s._v("解决了原型继承中，子类实例共享父类引用属性的问题")]),s._v(" "),n("li",[s._v("创建子类实例时，可以向父类传递参数")]),s._v(" "),n("li",[s._v("可以实现多继承（call多个父类对象）")])])]),s._v(" "),n("li",[n("p",[s._v("缺点：")])]),s._v(" "),n("li",[n("ul",[n("li",[s._v("实例并不是父类的实例，只是子类的实例")]),s._v(" "),n("li",[s._v("只能继承父类的实例属性和方法，不能继承原型属性/方法")]),s._v(" "),n("li",[s._v("无法实现函数复用，每个子类都有父类实例函数的副本，影响性能")])])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 父类\nfunction A() {\n  this.x = 100\n}\nA.prototype.getX = function() {\n  console.log(this.x)\n}\n\n// 子类\nfunction B() {\n  A.call(this) // 把A执行让A里面的this变为B的实例即b\n  this.y = 300\n}\nB.prototype.getY = function() {\n  console.log(this.y)\n}\n\nvar b = new B\nconsole.log(b.x) // 100\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br")])]),n("h3",{attrs:{id:"方式三-冒充对象继承-拷贝继承"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方式三-冒充对象继承-拷贝继承"}},[s._v("#")]),s._v(" 方式三 冒充对象继承(拷贝继承)")]),s._v(" "),n("ul",[n("li",[n("p",[n("strong",[s._v("核心")]),s._v("：把父类"),n("strong",[s._v("私有的+公有的")]),s._v("属性和方法克隆一份一模一样的作为子类私有的属性")])]),s._v(" "),n("li",[n("p",[s._v("特点：")])]),s._v(" "),n("li",[n("ul",[n("li",[s._v("支持多继承")])])]),s._v(" "),n("li",[n("p",[s._v("缺点：")])]),s._v(" "),n("li",[n("ul",[n("li",[s._v("效率较低，内存占用高（因为要拷贝父类的属性）")]),s._v(" "),n("li",[s._v("无法获取父类不可枚举的方法（不可枚举方法，不能使用"),n("code",[s._v("for in")]),s._v("  访问到）")])])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 父类\nfunction A() {\n  this.x = 100\n}\nA.prototype.getX = function() {\n  console.log(this.x)\n}\n\n// 子类\nfunction B() {\n  this.y = 200\n  var temp = new A\n  for (var key in temp) {\n    this[key] = temp[key]\n  }\n  temp = null\n}\nB.prototype.getY = function() {\n  console.log(this.y)\n}\n\nvar b = new B\nconsole.log(b.getX()) // 100\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br")])]),n("h3",{attrs:{id:"方式四-组合继承"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方式四-组合继承"}},[s._v("#")]),s._v(" 方式四 组合继承")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("原型继承+借用构造函数继承("),n("code",[s._v("call")]),s._v(" 继承)")])]),s._v(" "),n("li",[n("p",[n("strong",[s._v("核心")]),s._v("：使用原型链实现对原型方法的继承，而通过借用构造函数来实现对实例属性的继承")])]),s._v(" "),n("li",[n("p",[s._v("特点：")])]),s._v(" "),n("li",[n("ul",[n("li",[s._v("弥补了借用构造函数继承("),n("code",[s._v("call")]),s._v(" 继承)的缺陷，可以继承实例属性/方法，也可以继承原型属性/方法")]),s._v(" "),n("li",[s._v("既是子类的实例，也是父类的实例")]),s._v(" "),n("li",[s._v("不存在引用属性共享问题")]),s._v(" "),n("li",[s._v("可传参")]),s._v(" "),n("li",[s._v("函数可复用")])])]),s._v(" "),n("li",[n("p",[s._v("缺点：")])]),s._v(" "),n("li",[n("ul",[n("li",[s._v("调用了两次父类构造函数，生成了两份实例（子类实例将子类原型上的那份屏蔽了）")])])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 父类\nfunction A() {\n  this.x = 100\n}\nA.prototype.getX = function() {\n  console.log(this.x)\n}\n\n// 子类\nfunction B() {\n  A.call(this)\n  this.y = 300\n}\nB.prototype = new A\nB.prototype.constructor = B\nB.prototype.getY = function() {\n  console.log(this.y)\n}\n\nvar b = new B\nconsole.log(b.getX()) // 100\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br")])]),n("h3",{attrs:{id:"方式五-寄生组合继承"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方式五-寄生组合继承"}},[s._v("#")]),s._v(" 方式五 寄生组合继承")]),s._v(" "),n("p",[s._v("常用")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("寄生组合继承，即通过"),n("strong",[s._v("借用构造函")]),s._v("数来继承属性，通过"),n("strong",[s._v("原型链")]),s._v("的混成形式来继承方法")])]),s._v(" "),n("li",[n("p",[n("strong",[s._v("核心")]),s._v("：子类构造函数复制父类的自身属性和方法，子类原型只接收父类的原型属性和方法")])]),s._v(" "),n("li",[n("p",[s._v("特点：")])]),s._v(" "),n("li",[n("ul",[n("li",[s._v("堪称完美")])])]),s._v(" "),n("li",[n("p",[s._v("缺点：")])]),s._v(" "),n("li",[n("ul",[n("li",[s._v("实现复杂")])])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 父类\nfunction A() {\n  this.x = 100\n}\nA.prototype.getX = function() {\n  console.log(this.x)\n}\n\n// 子类\nfunction B() {\n  A.call(this)\n  this.y = 300\n}\n\nfunction createObject(o) {\n  function fn() {}\n  fn.prototype = o\n  return new fn\n}\n// B.prototype = Object.create(A.prototype) // IE 8 不兼容\nB.prototype = createObject(A.prototype) // IE 8 兼容\nB.prototype.constructor = B\nB.prototype.getY = function() {\n  console.log(this.y)\n}\n\nvar b = new B\nconsole.log(b.getX()) // 100\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br")])]),n("h3",{attrs:{id:"方式六-中间类继承"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方式六-中间类继承"}},[s._v("#")]),s._v(" 方式六 中间类继承")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 例如求平均值，去掉一个最大值，去掉一个最小值\nfunction avgFn() {\n  console.log(arguments)\n  arguments.__proto__ = Array.prototype\n  arguments.sort((a, b) => a - b)\n  arguments.pop()\n  arguments.shift()\n  return (eval(arguments.join('+')) / arguments.length).toFixed(2)\n}\nconsole.log(avgFn(10, 20, 30, 10, 30, 40, 40))\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("h2",{attrs:{id:"知识点六-小技巧"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#知识点六-小技巧"}},[s._v("#")]),s._v(" 知识点六 小技巧")]),s._v(" "),n("h3",{attrs:{id:"for-in"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#for-in"}},[s._v("#")]),s._v(" for...in...")]),s._v(" "),n("p",[n("code",[s._v("for...in...")]),s._v(" 循环在遍历的时候，默认的会把自己私有的和在它所属类原型上扩展的属性和方法都可以遍历到，但是一般情况下遍历一个对象只需要遍历私有的即可，我们可以使用以下的判断进行处理")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Object.prototype.aaa = function() {}\nvar obj = { name: 'test', age: 18 }\n\n// 不常用\nfor (var key in obj) {\n  if (obj.propertyIsEnumerable(key)) {\n    console.log(key) // name, age\n  }\n}\n\n// 常用\nfor (var key in obj) { \n  if (obj.hasOwnProperty(key)) {\n    console.log(key) // name, age\n  }\n}\n    \n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br")])]),n("p",[s._v("可以看出 "),n("code",[s._v("for in")]),s._v("  应用于数组循环返回的是数组的下标和数组的属性和原型上的方法和属性，而 "),n("code",[s._v("for in")]),s._v(" 应用于对象循环返回的是对象的属性名和原型中的方法和属性。")]),s._v(" "),n("p",[s._v("使用 "),n("code",[s._v("for in")]),s._v("  也可以遍历数组，但是会存在以下问题：")]),s._v(" "),n("ol",[n("li",[s._v("index索引为字符串型数字，不能直接进行几何运算")]),s._v(" "),n("li",[s._v("遍历顺序有可能不是按照实际数组的内部顺序")]),s._v(" "),n("li",[s._v("使用for in会遍历数组所有的可枚举属性，包括原型。例如上栗的原型方法method和name属性")]),s._v(" "),n("li",[s._v("for in遍历的是数组的索引（即键名），而for of遍历的是数组元素值")])]),s._v(" "),n("p",[s._v("所以"),n("code",[s._v("for in")]),s._v(" 更适合遍历对象，不要使用"),n("code",[s._v("for in")]),s._v(" 遍历数组。")]),s._v(" "),n("h3",{attrs:{id:"for-of"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#for-of"}},[s._v("#")]),s._v(" for...of..")]),s._v(" "),n("p",[n("code",[s._v("for..of")]),s._v(" 适用遍历数/数组对象/字符串/map/set等拥有迭代器对象的集合.但是不能遍历对象,因为没有迭代器对象.与"),n("code",[s._v("forEach()")]),s._v(" 不同的是，它可以正确响应"),n("code",[s._v("break、continue")]),s._v(" 和"),n("code",[s._v("return")]),s._v(" 语句")]),s._v(" "),n("p",[n("code",[s._v("for-of")]),s._v(" 循环不支持普通对象，但如果你想迭代一个对象的属性，你可以用"),n("code",[s._v("for-in")]),s._v(" 循环（这也是它的本职工作）或内建的"),n("code",[s._v("Object.keys()")]),s._v(" 方法")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 对象\nObject.prototype.sayHello = function () {\n  console.log('Hello');\n}\nvar myObject = {\n  name: 'zhangsan',\n  age: 10\n}\n\nfor (let key of myObject) { // myObject is not iterable\n  console.log(key); \n}\n\n// 数组\nArray.prototype.sayHello = function () {\n  console.log(\"Hello\");\n}\nvar myArray = [1, 200, 3, 400, 100];\nfor (let key of myArray) {\n  console.log(key); // 1, 200, 3, 400, 10\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br")])]),n("p",[n("strong",[s._v("为Object实现迭代器协议")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Object.prototype[Symbol.iterator]=function () {\n  var index=0;\n  var arr=[];\n  for (var item in this){\n    arr.push(this[item])\n  }\n  //迭代器对象\n  return{\n    next:function () {\n      //迭代对象\n      return{\n        value:arr[index++],\n        done:index>arr.length\n      }\n    }\n  }\n}\n\nvar obj={\n  name:'Nikki',\n  age:18,\n  add:'earth'\n}\n\nfor(v of obj) {\n  console.log(v)\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br")])]),n("p",[n("a",{attrs:{href:"https://www.cnblogs.com/zjx304/p/10687017.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("for in 和for of的区别"),n("OutboundLink")],1)]),s._v(" "),n("h3",{attrs:{id:"object-create"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#object-create"}},[s._v("#")]),s._v(" Object.create")]),s._v(" "),n("ul",[n("li",[n("strong",[n("code",[s._v("Object.create(proObj)")])]),s._v(" 方法创建一个新对象，使用现有的对象来提供新创建的对象的"),n("code",[s._v("__proto__")]),s._v(" ，即要把 "),n("code",[s._v("proObj")]),s._v(" 作为这个对象的原型。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function Fn() {\n  this.name = 'test'\n  this.age = 18\n}\nvar obj = {\n  constructor: Fn,\n  getName: function() {\n    console.log(this.name)\n    }\n}\nFn.prototype = obj\nvar f = new Fn\nvar newObj = Object.create(f, {\n  getAge:{\n    value: function() {\n        console.log(this.age)\n    }\n  }\n})\nnewObj.__proto__ // f\nnewObj.__proto__.__proto__ // Fn.prototype --\x3e obj\nnewObj.__proto__.__proto__.__proto__ // Object.prototype\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br")])]),n("ul",[n("li",[s._v("手写 "),n("strong",[n("code",[s._v("Object.create(proObj)")])])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function object(o) {\n  function Fn() {}\n  Fn.prototype = o\n  Fn.prototype.constructor = Fn\n  return new Fn;\n}\nvar obj = {\n  getX: function() {\n    console.log('get x!')\n  }\n}\nvar newObj = object(obj)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[n("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create",target:"_blank",rel:"noopener noreferrer"}},[s._v("Object.create"),n("OutboundLink")],1)]),s._v(" "),n("h2",{attrs:{id:"知识点七-原型链扩展"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#知识点七-原型链扩展"}},[s._v("#")]),s._v(" 知识点七 原型链扩展")]),s._v(" "),n("h3",{attrs:{id:"扩展第一步-在内置类的原型上扩展方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#扩展第一步-在内置类的原型上扩展方法"}},[s._v("#")]),s._v(" 扩展第一步 在内置类的原型上扩展方法")]),s._v(" "),n("p",[s._v("基于内置类的原型扩展方法注意事项：")]),s._v(" "),n("ul",[n("li",[s._v("自己扩展的方法最好加上特殊的前缀，方式把内置的方法覆盖掉")]),s._v(" "),n("li",[n("strong",[s._v("链式写法的核心")]),s._v("：执行完某一个方法，不仅得到了想要的结果，而且返回值还需要是当前这个类的实例，只有这样才能一直链下去")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var ary = [12, 23, 34, 12]\n// 原生的实现原理\nArray.prototype.pop = function() {\n  // this --\x3e ary\n  this.length--\n}\n\n// 扩展去重方法\nArray.prototype.unique = function unique() {\n  var obj = {}\n  for(var i = 0; i < this.length; i++) {\n    var cur = this[i]\n    if(cur === obj[cur]) {\n        this[i] = this[this.length - 1]\n      this.length--\n      i--\n      continue\n    }\n    obj[cur] = cur\n  }\n  obj = null\n  // 为了实现链式写法\n  return this\n}\n\nary.unique()\n\nary.pop()\nconsole.log(ary) // [12, 23]\n\nary.__proto__.pop() // this --\x3e ary.__proto__ --\x3e Array.prototype, 方法不起作用\nconsole.log(ary) // [12, 23]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br")])]),n("p",[n("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/738210/1597893503324-dfe73254-eb31-427f-89e5-47629d99bbd0.png?x-oss-process=image%2Fresize%2Cw_1500",alt:"image.png"}})]),s._v(" "),n("h3",{attrs:{id:"扩展第二步-批量给原型上设置公有方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#扩展第二步-批量给原型上设置公有方法"}},[s._v("#")]),s._v(" 扩展第二步 批量给原型上设置公有方法")]),s._v(" "),n("p",[s._v("注意")]),s._v(" "),n("ul",[n("li",[s._v("如果之前原型上存在一些方法的话，我们现在新创建的这个对象会把之前写的那些方法都给覆盖掉，所以浏览器内置类禁止自己创建一个新对象来扩展原型的方法的，防止我们用 "),n("code",[s._v("Fn.prototype = {}")]),s._v(" 把内置的方法覆盖掉")]),s._v(" "),n("li",[s._v("自己创建的对象中不会自带 "),n("code",[s._v("constructor")]),s._v(" 属性，所以导致了我们 "),n("code",[s._v("f.constructor")]),s._v(" 的结果是 "),n("code",[s._v("Object")]),s._v(" 而不是我们认为的 "),n("code",[s._v("Fn")])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function Fn() {\n  this.x = 100\n}\nFn.prototype = {\n  constructor: Fn,\n  a: function a() {},\n  b: function b() {},\n  c: function c() {}\n}\n\nvar f = new Fn\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[n("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/738210/1597900351850-bdd95dff-84fa-4e3a-8068-e71c94866c72.png",alt:"image.png"}})]),s._v(" "),n("h3",{attrs:{id:"扩展第三步-函数也是对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#扩展第三步-函数也是对象"}},[s._v("#")]),s._v(" 扩展第三步 函数也是对象")]),s._v(" "),n("h3",{attrs:{id:"扩展第四步-基于call、apply的原型链深入"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#扩展第四步-基于call、apply的原型链深入"}},[s._v("#")]),s._v(" 扩展第四步 基于call、apply的原型链深入")]),s._v(" "),n("h3",{attrs:{id:"扩展第五步-更多的继承方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#扩展第五步-更多的继承方式"}},[s._v("#")]),s._v(" 扩展第五步 更多的继承方式")]),s._v(" "),n("h3",{attrs:{id:"扩展第六步-constructor深入"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#扩展第六步-constructor深入"}},[s._v("#")]),s._v(" 扩展第六步 constructor深入")]),s._v(" "),n("h3",{attrs:{id:"扩展第七步-组合应用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#扩展第七步-组合应用"}},[s._v("#")]),s._v(" 扩展第七步 组合应用")]),s._v(" "),n("h2",{attrs:{id:"知识点八-需要总结的内容"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#知识点八-需要总结的内容"}},[s._v("#")]),s._v(" 知识点八 需要总结的内容")]),s._v(" "),n("ol",[n("li",[s._v("把 "),n("code",[s._v("window")]),s._v(" 、"),n("code",[s._v("document")]),s._v(" 、"),n("code",[s._v("div")]),s._v(" 、"),n("code",[s._v("a")]),s._v(" 的原型链一级级的结构画出来，画出来后，每一级原型上都有哪些属性和方法以及每个方法的作用、哪些兼容哪些不兼容总结出来。")])]),s._v(" "),n("h2",{attrs:{id:"参考-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考-2"}},[s._v("#")]),s._v(" 参考")]),s._v(" "),n("p",[n("a",{attrs:{href:"https://www.jianshu.com/p/86267fab4878",target:"_blank",rel:"noopener noreferrer"}},[s._v("es6中class类的全方面理解"),n("OutboundLink")],1)]),s._v(" "),n("p",[n("a",{attrs:{href:"https://tech.souyunku.com/?p=31635",target:"_blank",rel:"noopener noreferrer"}},[s._v("入门JavaScript中的this指向（ES6）"),n("OutboundLink")],1)]),s._v(" "),n("p",[n("a",{attrs:{href:"https://blog.csdn.net/weixin_44309374/article/details/102477209",target:"_blank",rel:"noopener noreferrer"}},[s._v("ES5和ES6继承的执行顺序和区别"),n("OutboundLink")],1)])])}),[],!1,null,null,null);n.default=t.exports}}]);